# 
# NitroMath+autolinking.cmake
# This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
# https://github.com/mrousavy/nitro
# Copyright Â© 2025 Marc Rousavy @ Margelo
#

# This is a CMake file that adds all files generated by Nitrogen
# to the current CMake project.
#
# To use it, add this to your CMakeLists.txt:
# ```cmake
# include(${CMAKE_SOURCE_DIR}/../nitrogen/generated/android/NitroMath+autolinking.cmake)
# ```

# Add all headers that were generated by Nitrogen
include_directories(
  "../nitrogen/generated/shared/c++"
  "../nitrogen/generated/android/c++"
  "../nitrogen/generated/android/"
)

# Add all .cpp sources that were generated by Nitrogen
target_sources(
  # CMake project name (Android C++ library name)
  NitroMath PRIVATE
  # Autolinking Setup
  ../nitrogen/generated/android/NitroMathOnLoad.cpp
  # Shared Nitrogen C++ sources
  ../nitrogen/generated/shared/c++/HybridCameraViewSpec.cpp
  ../nitrogen/generated/shared/c++/views/HybridCameraViewComponent.cpp
  ../nitrogen/generated/shared/c++/HybridMathSpec.cpp
  # Android-specific Nitrogen C++ sources
  ../nitrogen/generated/android/c++/JHybridCameraViewSpec.cpp
  ../nitrogen/generated/android/c++/views/JHybridCameraViewStateUpdater.cpp
  ../nitrogen/generated/android/c++/JHybridMathSpec.cpp
)

# Define a flag to check if we are building properly
add_definitions(-DBUILDING_NITROMATH_WITH_GENERATED_CMAKE_PROJECT)

# From node_modules/react-native/ReactAndroid/cmake-utils/folly-flags.cmake
# Used in node_modules/react-native/ReactAndroid/cmake-utils/ReactNative-application.cmake
 target_compile_definitions(
  NitroMath PRIVATE
  -DFOLLY_NO_CONFIG=1
  -DFOLLY_HAVE_CLOCK_GETTIME=1
  -DFOLLY_USE_LIBCPP=1
  -DFOLLY_CFG_NO_COROUTINES=1
  -DFOLLY_MOBILE=1
  -DFOLLY_HAVE_RECVMMSG=1
  -DFOLLY_HAVE_PTHREAD=1
  # Once we target android-23 above, we can comment
  # the following line. NDK uses GNU style stderror_r() after API 23.
  -DFOLLY_HAVE_XSI_STRERROR_R=1
)

# Add all libraries required by the generated specs
find_package(fbjni REQUIRED) # <-- Used for communication between Java <-> C++
find_package(ReactAndroid REQUIRED) # <-- Used to set up React Native bindings (e.g. CallInvoker/TurboModule)

# Add NitroModules includes manually
target_include_directories(NitroMath PRIVATE
    "../../node_modules/react-native-nitro-modules/android/build/headers/nitromodules"
)

# Define NitroModules library path based on build mode
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(NITRO_BUILD_MODE "release")
else()
    set(NITRO_BUILD_MODE "debug")
endif()

# Use imported library approach
add_library(NitroModulesImported SHARED IMPORTED)
set_target_properties(NitroModulesImported PROPERTIES
    IMPORTED_LOCATION "${CMAKE_CURRENT_SOURCE_DIR}/../../node_modules/react-native-nitro-modules/android/build/intermediates/prefab_package/${NITRO_BUILD_MODE}/prefab/modules/NitroModules/libs/android.${ANDROID_ABI}/libNitroModules.so"
)

# Link all libraries together
target_link_libraries(
        NitroMath
        fbjni::fbjni                              # <-- Facebook C++ JNI helpers
        ReactAndroid::jsi                         # <-- RN: JSI
        NitroModulesImported                      # <-- NitroModules library
)

# Link react-native (different prefab between RN 0.75 and RN 0.76)
if(ReactAndroid_VERSION_MINOR GREATER_EQUAL 76)
    target_link_libraries(
        NitroMath
        ReactAndroid::reactnative                 # <-- RN: Native Modules umbrella prefab
    )
else()
    target_link_libraries(
        NitroMath
        ReactAndroid::react_nativemodule_core     # <-- RN: TurboModules Core
    )
endif()
