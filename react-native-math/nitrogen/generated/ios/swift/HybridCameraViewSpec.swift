///
/// HybridCameraViewSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCameraViewSpec``
public protocol HybridCameraViewSpec_protocol: HybridObject, HybridView {
  // Properties
  var enableFlash: Bool { get set }

  // Methods
  
}

/// See ``HybridCameraViewSpec``
public class HybridCameraViewSpec_base {
  private weak var cxxWrapper: HybridCameraViewSpec_cxx? = nil
  public func getCxxWrapper() -> HybridCameraViewSpec_cxx {
  #if DEBUG
    guard self is HybridCameraViewSpec else {
      fatalError("`self` is not a `HybridCameraViewSpec`! Did you accidentally inherit from `HybridCameraViewSpec_base` instead of `HybridCameraViewSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCameraViewSpec_cxx(self as! HybridCameraViewSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the CameraView HybridObject.
 * Implement this protocol to create Swift-based instances of CameraView.
 * ```swift
 * class HybridCameraView : HybridCameraViewSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCameraViewSpec = HybridCameraViewSpec_protocol & HybridCameraViewSpec_base
