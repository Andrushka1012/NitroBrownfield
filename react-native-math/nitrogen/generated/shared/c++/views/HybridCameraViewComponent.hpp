///
/// HybridCameraViewComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <optional>
#include <functional>
#include <memory>
#include "HybridCameraViewSpec.hpp"

namespace margelo::nitro::math::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridCameraViewComponentName[];

  /**
   * Props for the "CameraView" View.
   */
  class HybridCameraViewProps final: public react::ViewProps {
  public:
    HybridCameraViewProps() = default;
    HybridCameraViewProps(const HybridCameraViewProps&);
    HybridCameraViewProps(const react::PropsParserContext& context,
                          const HybridCameraViewProps& sourceProps,
                          const react::RawProps& rawProps);

  public:
    CachedProp<bool> enableFlash;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::math::HybridCameraViewSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "CameraView" View.
   */
  class HybridCameraViewState final {
  public:
    HybridCameraViewState() = default;

  public:
    void setProps(const HybridCameraViewProps& props) { _props.emplace(props); }
    const std::optional<HybridCameraViewProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridCameraViewState(const HybridCameraViewState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridCameraViewState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridCameraViewState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridCameraViewProps> _props;
  };

  /**
   * The Shadow Node for the "CameraView" View.
   */
  using HybridCameraViewShadowNode = react::ConcreteViewShadowNode<HybridCameraViewComponentName /* "HybridCameraView" */,
                                                                   HybridCameraViewProps /* custom props */,
                                                                   react::ViewEventEmitter /* default */,
                                                                   HybridCameraViewState /* custom state */>;

  /**
   * The Component Descriptor for the "CameraView" View.
   */
  class HybridCameraViewComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridCameraViewShadowNode> {
  public:
    HybridCameraViewComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridCameraViewProps`.
     */
    react::Props::Shared cloneProps(const react::PropsParserContext& context,
                                    const react::Props::Shared& props,
                                    react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "CameraView" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::math::views
